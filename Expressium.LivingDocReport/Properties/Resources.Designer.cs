//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Expressium.LivingDocReport.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Expressium.LivingDocReport.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 		&lt;meta charset=&quot;UTF-8&quot;&gt;
        ///		&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
        ///		&lt;title&gt;Expressium LivingDoc&lt;/title&gt;
        ///		&lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;.
        /// </summary>
        internal static string Heads {
            get {
                return ResourceManager.GetString("Heads", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     &lt;script&gt;
        ///        function loadScenario(x) {
        ///            var featureId = x.getAttribute(&apos;data-featureid&apos;);
        ///            var scenarioId = x.getAttribute(&apos;data-scenarioid&apos;);
        ///            var feature = document.getElementById(featureId).innerHTML;
        ///            var scenario = document.getElementById(scenarioId).innerHTML;
        ///
        ///            document.getElementById(&apos;right-section&apos;).innerHTML = feature + scenario;
        ///        }
        ///    &lt;/script&gt;
        ///    &lt;script&gt;
        ///        function loadFeature(x) {
        ///            var feature [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Scripts {
            get {
                return ResourceManager.GetString("Scripts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     &lt;script&gt;
        ///        const splitter = document.getElementById(&apos;splitter&apos;);
        ///        const leftSection = document.getElementById(&apos;left-section&apos;);
        ///        const rightSection = document.getElementById(&apos;right-section&apos;);
        ///
        ///        let isDragging = false;
        ///
        ///        splitter.addEventListener(&apos;mousedown&apos;, (e) =&gt; {
        ///            isDragging = true;
        ///            document.body.style.cursor = &apos;col-resize&apos;;
        ///        });
        ///
        ///        document.addEventListener(&apos;mousemove&apos;, (e) =&gt; {
        ///            if (!isDragging) return;
        ///        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Splitter {
            get {
                return ResourceManager.GetString("Splitter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     &lt;style&gt;
        ///        @property --master-color {
        ///            syntax: &quot;&lt;color&gt;&quot;;
        ///            inherits: false;
        ///            initial-value: steelblue;
        ///            initial-value: #3C78AA;
        ///            initial-value: #326EA0;            
        ///        }
        ///
        ///        @property --primary-color {
        ///            syntax: &quot;&lt;color&gt;&quot;;
        ///            inherits: false;
        ///            initial-value: #598EBC;
        ///            initial-value: #508CBE;     
        ///            initial-value: #909090;
        ///        }
        ///
        ///        @property --secondary-color [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Styles {
            get {
                return ResourceManager.GetString("Styles", resourceCulture);
            }
        }
    }
}
